image: frolvlad/alpine-glibc

before_script:
  - apk update && apk --no-cache add g++ gcc libgcc libstdc++ linux-headers make python3 curl nodejs npm tar

  # Cache node modules - speeds up future builds
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules

# Define the stages
stages:
  - setup
  - audit_scan
  - deploy

# Define the process for each stage

# Define the process for setup stage
setup:
  stage: setup
  tags:
    - ohtu-build-1
  script:
    - npm ci --production

# Define the process for deploy stage to development environment
deploy_dev:
  stage: deploy
  tags:
    - ohtu-build-1
  environment:
    name: development
  only:
    - master
  except:
    # Skip deploy when scheduled npm audit and outdated scans are executed.
    - schedules
  script:
    - curl -fsSLO --compressed "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz";
    - tar xvzf openshift-client-linux.tar.gz -C /usr/local/bin
    # before any action, I connect to the OpenShift server with the appropriate credentials
    # this parameter: `--insecure-skip-tls-verify` is important because we use a certificate signed by an unknown authority
    - oc login https://$OPENSHIFT_ADDR_TEST:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_TEST --insecure-skip-tls-verify
    - oc project organisaatiorekisteri
    # add secrets here
    - oc delete secret generic hy-organisation-api-key --ignore-not-found
    - oc create secret generic hy-organisation-api-key --from-literal=HY_ORGANISATION_API_KEY=$HY_ORGANISATION_TEST_API_KEY
    # list environment variables here
    - oc set env --from=secret/hy-organisation-api-key dc/organisaatiorekisteri-backend-dev
    - oc set env dc/organisaatiorekisteri-backend-dev API_GATEWAY_HOST=$API_GATEWAY_HOST_DEV
    - oc set env dc/organisaatiorekisteri-backend-dev API_DB_HOST=$API_DB_HOST_DEV
    - oc set env dc/organisaatiorekisteri-backend-dev API_OU_SERVICE_HOST=$API_OU_SERVICE_HOST_DEV
    - oc set env dc/organisaatiorekisteri-backend-dev OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env dc/organisaatiorekisteri-backend-dev OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    # start build process in OpenShift
    - oc start-build organisaatiorekisteri-backend-dev --from-dir=. --follow

deploy_test:
  stage: deploy
  tags:
    - ohtu-build-1
  environment:
    name: test
  only:
    - test
  script:
    - curl -fsSLO --compressed "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz";
    - tar xvzf openshift-client-linux.tar.gz -C /usr/local/bin
    # before any action, I connect to the OpenShift server with the appropriate credentials
    # this parameter: `--insecure-skip-tls-verify` is important because we use a certificate signed by an unknown authority
    - oc login https://$OPENSHIFT_ADDR_TEST:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_TEST --insecure-skip-tls-verify
    - oc project organisaatiorekisteri
    # add secrets here
    - oc delete secret generic hy-organisation-api-key --ignore-not-found
    - oc create secret generic hy-organisation-api-key --from-literal=HY_ORGANISATION_API_KEY=$HY_ORGANISATION_TEST_API_KEY
    # list any environment variables here
    - oc set env --from=secret/hy-organisation-api-key dc/organisaatiorekisteri-backend-test
    - oc set env dc/organisaatiorekisteri-backend-test API_GATEWAY_HOST=$API_GATEWAY_HOST_TEST
    - oc set env dc/organisaatiorekisteri-backend-test API_DB_HOST=$API_DB_HOST_TEST
    - oc set env dc/organisaatiorekisteri-backend-test API_OU_SERVICE_HOST=$API_OU_SERVICE_HOST_TEST
    - oc set env dc/organisaatiorekisteri-backend-test OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env dc/organisaatiorekisteri-backend-test OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    - oc start-build organisaatiorekisteri-backend-test --from-dir=. --follow

deploy_prod:
  stage: deploy
  tags:
    - ohtu-build-1
  environment:
    name: prod
  only:
    - prod
  script:
    - curl -fsSLO --compressed "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz";
    - tar xvzf openshift-client-linux.tar.gz -C /usr/local/bin
    # before any action, I connect to the OpenShift server with the appropriate credentials
    # this parameter: `--insecure-skip-tls-verify` is important because we use a certificate signed by an unknown authority
    - oc login https://$OPENSHIFT_ADDR_PROD:$OPENSHIFT_PORT --token=$OPENSHIFT_TOKEN_PROD --insecure-skip-tls-verify
    - oc project organisaatiorekisteri
    # add secrets here
    - oc delete secret generic hy-organisation-api-key --ignore-not-found
    - oc create secret generic hy-organisation-api-key --from-literal=HY_ORGANISATION_API_KEY=$HY_ORGANISATION_PROD_API_KEY
    # list any environment variables here
    - oc set env --from=secret/hy-organisation-api-key dc/organisaatiorekisteri-backend-prod
    - oc set env dc/organisaatiorekisteri-backend-prod API_GATEWAY_HOST=$API_GATEWAY_HOST_PROD
    - oc set env dc/organisaatiorekisteri-backend-prod API_DB_HOST=$API_DB_HOST_PROD
    - oc set env dc/organisaatiorekisteri-backend-prod API_OU_SERVICE_HOST=$API_OU_SERVICE_HOST_PROD
    - oc set env dc/organisaatiorekisteri-backend-prod OPENSHIFT_NODEJS_IP=$OPENSHIFT_NODEJS_IP
    - oc set env dc/organisaatiorekisteri-backend-prod OPENSHIFT_NODEJS_PORT=$OPENSHIFT_NODEJS_PORT
    - oc start-build organisaatiorekisteri-backend-prod --from-dir=. --follow

# Rules for the scheduled npm audit and outdated scans
dependency scanning:
  stage: audit_scan
  tags:
    - ohtu-build-1
  allow_failure: true
  only:
    - schedules
  script:
    # Run npm audit and npm outdated commands and write outputs to a txt file.
    - echo "Running npm diagnostics, audit and outdated..."
    - export RESULT_FILE="./npm_scan_results.txt"
    # Create result file
    - touch $RESULT_FILE
    # Write to the result file
    - echo " ************ ORGREK-BACKEND NPM AUDIT RESULT ************ " >> $RESULT_FILE
    - echo "https://version.helsinki.fi/tike-ohtu/orgrek-backend" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    - echo "=== npm audit security report ===" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    # Run npm audit and "catch" the possible non zero exit code (https://docs.gitlab.com/ee/ci/yaml/#script)
    - "npm ci  >> $RESULT_FILE || exit_code=$?"
    # npm audit --parseable | awk -F $'\t' 'NF {print "   Package: "$2, "\tLevel: "$3, "\tMore info: "$6}' # this would be nice format
    # Add a message based on npm audit's return code
    - if [ $exit_code -ne 0 ]; then echo "Some vulnerabilities was found, check the above packages." >> $RESULT_FILE; fi;
    - if [ $exit_code -eq 0 ]; then echo "All is good, enjoy the moment." >> $RESULT_FILE; fi;
    - echo "" >> $RESULT_FILE
    - echo " ************ ORGREK-BACKEND NPM OUTDATED RESULT ************ " >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    - echo "=== npm outdated report ===" >> $RESULT_FILE
    - echo "" >> $RESULT_FILE
    # Run npm outdated and "catch" the possible non zero exit code (https://docs.gitlab.com/ee/ci/yaml/#script)
    - npm outdated >> $RESULT_FILE || exit_code=$?
    - echo "" >> $RESULT_FILE
    - echo " ************ END OF FILE ************ " >> $RESULT_FILE
    - cat $RESULT_FILE
    - echo "Done with npm diagnostics."
    - echo "Sending results to Slack..."
    # Send result file to "audit-logs" channel in Ohtu's Slack space (see https://api.slack.com/methods/files.upload).
    - "curl -F file=@${CI_PROJECT_DIR}/$RESULT_FILE -F 'initial_comment=Orgrek-backend npm report' -F channels=${AUDIT_RESULT_SLACK_CHANNEL_ID} -F filename=$RESULT_FILE -F filetype=text -H 'Authorization: Bearer '${SLACK_FILE_UPLOAD_TOKEN} https://slack.com/api/files.upload"
    - echo "Done with sending results to Slack."
